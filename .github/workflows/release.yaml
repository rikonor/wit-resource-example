name: release

on:
  workflow_dispatch:
    inputs:
      title:
        description: 'Title for the release'
        required: true
        type: string

      description:
        description: 'Human-readable description of the release'
        required: true
        type: string

      ref:
        description: 'Commit to base the release on (defaults to `HEAD`)'
        required: false
        type: string

      tag:
        description: 'Tag for the release (defaults to `anonymization-backend-<COMMIT>`)'
        required: false
        type: string

permissions:
  contents: write

env:
  NAME: anonymization-backend
  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  ok:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - run: gh release list

      - name: build
        run: |
          OUTPUT=$(mktemp -d)

          cat data.txt | base64    > ${OUTPUT}/output.base64.txt
          cat data.txt | xxd -p -u > ${OUTPUT}/output.hex.txt

          ARTIFACTS=(
            ${OUTPUT}/output.base64.txt
            ${OUTPUT}/output.hex.txt
          )

          echo "ARTIFACTS=${ARTIFACTS[@]}" >> "${GITHUB_ENV}"

      - name: checksums
        run: |
          CHECKSUMS=$(mktemp)

          for ARTIFACT in ${ARTIFACTS[@]}; do
              shasum -a256 ${ARTIFACT} >> ${CHECKSUMS}
          done

          echo "CHECKSUMS=${CHECKSUMS}" >> "${GITHUB_ENV}"

      - name: tag
        run: |
          REF='${{ inputs.ref }}'
          if [[ -z "${REF}" ]]; then
            REF='HEAD'
          fi

          COMMIT=$(git rev-parse ${REF})
          git checkout ${COMMIT}

          RELEASE_TAG='${{ inputs.tag }}'
          if [[ -z "${RELEASE_TAG}" ]]; then
            COMMIT_SHORT=$(git rev-parse --short ${COMMIT})
            RELEASE_TAG="${{ env.NAME }}-${COMMIT_SHORT}"
          fi
          
          git tag ${RELEASE_TAG}
          git push origin tag ${RELEASE_TAG}

          echo "RELEASE_TAG=${RELEASE_TAG}" >> "${GITHUB_ENV}"

      - name: release notes
        run: |
          NOTES=$(mktemp)

          CODE_BLOCK='```'

          cat > ${NOTES} <<EOF
          ${{ inputs.description }}

          ## Verification

          To reproduce the artifacts of this release:

          ${CODE_BLOCK}
          cat data.txt | base64    > output.base64.txt
          cat data.txt | xxd -p -u > output.hex.txt
          ${CODE_BLOCK}

          ## Checksums

          ${CODE_BLOCK}
          $(cat ${CHECKSUMS})
          ${CODE_BLOCK}
          EOF

          echo "NOTES=${NOTES}" >> "${GITHUB_ENV}"

      - name: release
        run: |
          gh release create \
            ${RELEASE_TAG} ${ARTIFACTS[@]} \
                --title '${{ inputs.title }}' \
                --verify-tag \
                --latest=false \
                --notes-file ${NOTES}
